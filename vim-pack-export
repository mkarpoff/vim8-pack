#! /usr/bin/env bash
repo_dir=$HOME/.vim/pack/git-plugins
silent=false

####
# This handles the optional arguments
###
ofile_specified=false

SHORT=hsd:
LONG=help,silent,git-dir:

getopt --test > /dev/null
supports_long_opts=$(( $? == 4 ))
if [[ $supports_long_opts == 1 ]]; then
	PARSED=$(getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@")
else
	PARSED=$(getopt --options $SHORT --name "$0" -- "$@")
fi

if (( $? != 0 )); then
	echo 'Failed to parse arguments'
	exit 2
fi

eval set -- "$PARSED"
while true; do
	case "$1" in
		-h|--help)
			usage=true
			break
			;;
		-d|--git-dir)
			repo_dir=$2
			shift 2
			;;
		-s|--silent)
			silent=true
			shift
			;;
		--)
			shift
			break
			;;
		*)
			break
			;;
	esac
done
if [[ $usage == true ]]; then
	echo 'usage: vim-pack export [-s|--silent] [-d <dir>| --git-dir=<dir>] [<file>]'
	echo 'usage: vim-pack list   [-s|--silent] [-d <dir>| --git-dir=<dir>] [<file>]'
	echo
	echo
	echo '       If <file> is provided then the list of packages will be exported to a file'
	echo '       following the INI file format. If the -s or --silent option arguments are'
	echo '       given then an output file is mandatory. This is useful for transferring '
	echo '       configurations across machines and for listing all installed packages'
	echo
	echo 'Options:'
	echo '    -s| --silent'
	echo '        To hide output that normally goes to stdout'
	echo
	echo '    -d <dir> | --git-dir=<dir>'
	echo '        Specify the name for the package directory by default it is'
	echo '        $HOME/.vim/pack/git-plugins'
	echo
	echo 'Note:'
	echo '       Long options are only available with systems that have an enhanced version'
	echo '       of getopt.'
	if [[ $supports_long_opts == true ]]; then
		echo '       This system DOES support long options'
	else
		echo '       This system DOES NOT support long options'
	fi
	exit 0
fi

if [[ ! -z "$1" ]]; then
	outfile=$1
	ofile_specified=true
fi
if [[ "$silent" == true ]] && [[ "$ofile_specified" == false ]]; then
	echo "Cannot export silent without a output file specified"
	echo "Provide an output file"
	exit 1
fi

repo_list=''
for i in {opt,start}; do
	repos_folders=$(ls "$repo_dir/$i/")
	for j in $repos_folders; do
		url=$(git -C "$repo_dir/$i/$j" remote get-url origin)
		if [[ "$ofile_specified" == true ]]; then
			repo_list+="[$j]\n"
			repo_list+="	dir = $i/$j\n"
			repo_list+="	url = $url\n"
		fi
		if [[ "$silent" == false ]]; then
			echo "[$j]"
			echo "	dir = $i/$j"
			echo "	url = $url"
		fi
	done
done
if [[ "$ofile_specified" == true ]]; then
	echo -e "$repo_list" > "$outfile"
fi

exit 0

