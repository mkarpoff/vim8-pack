#! /usr/bin/env bash
###
# Test some variables for setting up options
###

supports_long_opts=false
getopt --test > /dev/null
if (( $? == 4 )); then
	supports_long_opts=true
fi

# Pull in code from parallel interface
my_dir="$(dirname "$(readlink "$0")")"
source "$my_dir/vim-pack-parallel"

###
# Prints the Usage message and exist return the first arg as return code
###
usage() {
	echo 'usage: vim-pack upgrade [options]'
	echo
	echo 'options:'
	echo 'general options:'
	echo '    -d <dir> | --git-dir=<dir>'
	echo '        specify the name for the package directory by default it is'
	echo "        $HOME/.vim/pack/git-plugins"
	echo
	echo '    -h| --help'
	echo '        displays a really helpful message about how to use the program'
	echo
	echo '    -s| --silent'
	echo '        to hide output that normally goes to stdout'
	echo
	echo '    -v| --verbose'
	echo '        Prints out verbose output.'
	echo
	parallel_usage_options
	echo
	echo 'note:'
	echo '       long options are only available with systems that have an enhanced version'
	echo '       of getopt.'
	if [[ $supports_long_opts == true ]]; then
		echo '       This system does support long options'
	else
		echo '       This system does not support long options'
	fi
	parallel_usage_notes
	echo
	exit "$1"
}

# Repository Directory default location
repo_dir="$HOME/.vim/pack/git-plugins"

# silent is disabled by default
silent=false

# verbose is disabled by default
verbose=false


###
# This handles the optional arguments
###
SHORT="d:hsv$parallel_short_opts"
LONG="git-dir:,help,silent,verbose,$parallel_long_opts"

if [[ $supports_long_opts == true ]]; then
	if ! PARSED=$(getopt --options $SHORT --longoptions $LONG --name "$0" -- "$@"); then
		echo 'Failed to parse arguments'
		usage 1
	fi
else
	if ! PARSED=$(getopt --options $SHORT --name "$0" -- "$@"); then
		echo 'Failed to parse arguments'
		usage 1
	fi
fi

eval set -- "$PARSED"
while true; do
	parallel_parse_opt "$@"
	ret=$?
	if (( ret != 0 )); then
		shift $ret
		continue
	fi
	case "$1" in
		-h|--help)
			usage 0
			;;
		-d|--git-dir)
			repo_dir=$2
			shift 2
			;;
		-s|--silent)
			silent=true
			shift
			;;
		-v|--verbose)
			verbose=true
			shift
			;;
		--)
			shift
			break
			;;
	esac
done

if [[ "$verbose" == true ]]; then
	echo "Package directory:      $repo_dir"
	echo "Has moreutils parallel: $has_more"
	echo "Has gnu parallel:       $has_gnu"
	echo "Number of threads:      $threads"
	if [[ "$use_more" == true ]]; then
		echo "Using run method:       moreutils parallel"
	elif [[ "$use_gnu" == true ]]; then
		echo "Using run method:       GNU parallel"
	else
		echo "Using run method:       iterative loop"
	fi
fi

if [[ "$silent" == true ]]; then
	cmd='git -C "{}" pull > /dev/null'
elif [[ "$verbose" == true ]]; then
	cmd='out=$(git -C "{}" pull);
	if ! [[ "$out" =~ "Already up to date." ]];
	then
		msg="Updated"
	else
		msg="Already up to date"
	fi
	echo -e "git -C {} pull\n$out\n$msg {}"'
else
	cmd='out=$(git -C "{}" pull)
	if ! [[ "$out" =~ "Already up to date." ]]; then
		msg="Updated"
	else
		msg="Already up to date"
	fi
	echo "$msg {}"'
fi

parallel_run "$cmd" $repo_dir/{opt,start}/*
echo "Done updating"

exit 0
